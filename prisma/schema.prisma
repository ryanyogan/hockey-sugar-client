generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  name             String
  passwordHash     String
  role             Role             @default(PARENT)
  isAdmin          Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
  recordedReadings GlucoseReading[] @relation("RecordedBy")
  preferences      UserPreferences?
  isAthlete        Boolean          @default(false)
  athleteParents   AthleteParent[]  @relation("ParentAthletes")
  parentAthletes   AthleteParent[]  @relation("AthleteParents")

  @@index([email])
}

enum Role {
  ADMIN
  PARENT
  COACH
  ATHLETE
}

model GlucoseReading {
  id           String   @id @default(cuid())
  value        Float
  unit         String   @default("mg/dL")
  recordedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // The recordedById remains - which parent recorded this reading
  recordedById String
  recordedBy   User     @relation("RecordedBy", fields: [recordedById], references: [id], onDelete: Cascade)
  status       Status?  @relation(fields: [statusId], references: [id])
  statusId     String?
  source       String?  @default("manual")

  @@index([recordedById])
}

model Status {
  id              String           @id @default(cuid())
  type            StatusType
  acknowledgedAt  DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  glucoseReadings GlucoseReading[]
}

enum StatusType {
  OK
  HIGH
  LOW
}

model Message {
  id         String   @id @default(cuid())
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  isUrgent   Boolean  @default(false)

  @@index([senderId])
  @@index([receiverId])
}

model DexcomToken {
  id           String   @id @default(cuid())
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserPreferences {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lowThreshold  Int      @default(70)
  highThreshold Int      @default(180)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model AthleteParent {
  id        String   @id @default(cuid())
  athleteId String
  parentId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  athlete   User     @relation("AthleteParents", fields: [athleteId], references: [id], onDelete: Cascade)
  parent    User     @relation("ParentAthletes", fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([athleteId, parentId])
  @@index([athleteId])
  @@index([parentId])
}
